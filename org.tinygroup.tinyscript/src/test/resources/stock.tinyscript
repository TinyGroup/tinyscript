
import org.tinygroup.etl.DataSet;
import org.tinygroup.etl.Field;


class Example6 {
    
    /* 统计一个月内连续三天涨停的股票 */
    countStock(path) {
       ratio = 0.095d;
       ds = readTxt(path);
       groupds =ds.insertColumn(3,"UP").convert("CL","double").group("CODE").sortGroup("DT ASC");
       groupds.subGroup(1,1).update("UP",0d);  //每月的第一天涨停率为0
       groupds.update("UP",(CL[0]-CL[-1])/CL[-1]);  //之后的每天统计当天的涨停率。
       resultds = groupds.filterGroup(UP[0]>ratio && UP[1]>ratio && UP[2]>ratio);
       return resultds;
    }
    
    /* 根据规则统计不同订单的邮费 */
    countMailCharge(path1,path2){
       ruleDs = readTxt(path1).convert("MINVAL","int").convert("MAXVAL","int").convert("CHARGE","int");
       orderDs = readTxt(path2).convert("COST","int").convert("WEIGHT","int").insertColumn(4,"POSTAGE");
       costRuleDs = ruleDs.filter(()->{return FIELD == "COST";}).sort("MINVAL");   //cost维度规则集
       weightRuleDs = ruleDs.filter(()->{return FIELD == "WEIGHT";}).sort("MINVAL");  //weight维度规则集
       orderDs.match(costRuleDs,COST > MINVAL).update("POSTAGE","CHARGE");   //通过match函数匹配COST规则
       orderDs.match(weightRuleDs,POSTAGE ==null && WEIGHT > MINVAL && WEIGHT <=MAXVAL).update("POSTAGE","CHARGE");  //通过match函数匹配WEIGHT规则   
       return orderDs;
    }
    
     /* 统计订购产品的客户账户余额  */
    countBalance(){
       customerDs = readTxt("src/test/resources/Customers.txt").convert("acct_balance","double");
       orderDs = readTxt("src/test/resources/Orders.txt");
       orderDetailDs = readTxt("src/test/resources/OrderDetails.txt");
       productDs = readTxt("src/test/resources/Products2.txt");
       
       tempDs =  orderDetailDs.join(orderDs,order_id=order_id).join(customerDs ,customer_id=customer_id).copy().select("customer_id","order_id","item_id","acct_balance");   //关联前三张表
       groupDs = tempDs.group("customer_id"); //按客户分组
       groupDs.distinctGroup("item_id"); //统计分组客户消费的产品
       num = productDs.getRows(); //统计全部产品数目
       allProductDs = groupDs.filterGroup(distinctGroup_item_id.size()==num);  //购买全部产品的客户分组集
       otherDs =  groupDs.filterGroup("distinctGroup_item_id.size() < num"); //购买部分产品的客户分组集
       balance1 =  allProductDs.avg("acct_balance");
       balance2 =  otherDs.avg("acct_balance");
       System.out.println("balance1="+balance1+" balance2="+balance2);
    }
    
     /* 统计某年的大客户  */
    countVip(){
       contractDs = readTxt("src/test/resources/Contract.txt").convert("Amount","double");
       clientDs = readTxt("src/test/resources/Client.txt");
       firstDs  = contractDs.filter(()->{return SellDate.startsWith("1998");}).join(clientDs,Client = ID); //过滤1998年的数据，并关联client表
       groupDs  = firstDs.select("Name","Amount").group("Name");  //保留计算字段,并按用户分组
       groupDs.sumGroup("Amount"); //统计每个用户的金额
       halfAmount = groupDs.sort("sumGroup_Amount desc").sum("sumGroup_Amount")/2;
       list = [];  //建立空序列
       groupDs.forEach( (i) -> {
           halfAmount -= sumGroup_Amount;
           if(halfAmount>0){
              list.add(Name);
           }
       } );
       return list;
    }
    
    /* 统计水仙花数  */
    countNarcissisticNumber(){
       list = new java.util.ArrayList(); 
       for(i=100;i<=999;i++){
          i1 = i/100;
          i2 = (i-i1*100)/10;
          i3 = i%10;
          //System.out.println("i1="+i1+" i2="+i2+" i3="+i3);
          if(pow(i1,3)+pow(i2,3)+pow(i3,3)==i){
            list.add(i);
          }
       }
       return list;
    }
    
    /* 统计10名学生科目成绩  */
    countScoreList(){
        math = [117,142,146,140,120,131,109,135,101,145];  //数学成绩
        Chinese = [94,101,92,126,101,91,126,123,97,114];   //语文成绩
        english = [102,98,143,91,128,115,120,97,139,101];  //英文成绩
        integratedScience = [211,219,208,287,296,213,206,188,217,241]; //理科综合成绩
        System.out.println("math avg="+avg(math)+" max="+max(math)+" min="+min(math));
        System.out.println("Chinese avg="+avg(Chinese)+" max="+max(Chinese)+" min="+min(Chinese));
        System.out.println("english avg="+avg(english)+" max="+max(english)+" min="+min(english));
        System.out.println("integratedScience avg="+avg(integratedScience)+" max="+max(integratedScience)+" min="+min(integratedScience));
        for(i=0;i<10;i++){
           System.out.println("第"+(i+1)+"名学生总分:"+(math.get(i)+Chinese.get(i)+english.get(i)+integratedScience.get(i)));
        }
        //成绩排序
        math.sort("desc");
        Chinese.sort("desc");
        english.sort("desc");
        integratedScience.sort("desc");
        System.out.println("sort math="+math);
        System.out.println("sort Chinese="+Chinese);
        System.out.println("sort english="+english);
        System.out.println("sort integratedScience="+integratedScience);
    }
}